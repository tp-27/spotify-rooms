{"ast":null,"code":"var _jsxFileName = \"/Users/thomasphan/Desktop/listen-with-me-app/src/components/Key.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport '../index.css';\nimport CopyButton from './CopyButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Key = () => {\n  _s();\n  const [key, setKey] = useState('testkey');\n  const [copy, setCopy] = useState(false);\n  const keyRef = useRef();\n  const keyDivStyle = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    width: \"100%\"\n  };\n  const copyToClipboard = () => {\n    const key = keyRef.current.innerText; // Get the text content of the paragraph\n    navigator.clipboard.writeText(key) // Use Clipboard API to copy text\n    .then(() => {\n      console.log('Text copied to clipboard');\n      setCopy(true);\n    }).catch(err => {\n      console.error('Failed to copy text: ', err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Key:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-key-container\",\n      style: keyDivStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"key-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: keyRef,\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CopyButton, {\n        onClick: () => copyToClipboard(),\n        showCopied: copy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Key, \"1FyXGDXt+Na7AtIWDXAEdBNa2Ug=\");\n_c = Key;\nexport default Key;\nvar _c;\n$RefreshReg$(_c, \"Key\");","map":{"version":3,"names":["useState","useRef","Button","CopyButton","jsxDEV","_jsxDEV","Fragment","_Fragment","Key","_s","key","setKey","copy","setCopy","keyRef","keyDivStyle","display","justifyContent","width","copyToClipboard","current","innerText","navigator","clipboard","writeText","then","console","log","catch","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","ref","onClick","showCopied","_c","$RefreshReg$"],"sources":["/Users/thomasphan/Desktop/listen-with-me-app/src/components/Key.js"],"sourcesContent":["import { useState, useRef } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport '../index.css';\nimport CopyButton from './CopyButton';\n\nconst Key = () => {\n    const [key, setKey] = useState('testkey')\n    const [copy, setCopy] = useState(false)\n    const keyRef = useRef()\n\n    const keyDivStyle = {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        width: \"100%\",\n    };\n\n    const copyToClipboard = () => {\n        const key = keyRef.current.innerText; // Get the text content of the paragraph\n        navigator.clipboard.writeText(key) // Use Clipboard API to copy text\n            .then(() => {\n                console.log('Text copied to clipboard');\n                setCopy(true)\n            })\n            .catch(err => {\n                console.error('Failed to copy text: ', err);\n            });\n    };\n\n    return (\n        <>\n            <p>Key:</p>\n            <div className=\"new-key-container\" style={keyDivStyle}>\n                <div className=\"key-container\">\n                    <p ref={keyRef}>{key}</p>\n                </div>\n\n                <CopyButton onClick={() => copyToClipboard()} showCopied={copy} />\n            </div>\n            \n            \n        </>\n    )\n}\n\nexport default Key"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAO,cAAc;AACrB,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,SAAS,CAAC;EACzC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAMc,MAAM,GAAGb,MAAM,CAAC,CAAC;EAEvB,MAAMc,WAAW,GAAG;IAChBC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,eAAe;IAC/BC,KAAK,EAAE;EACX,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMT,GAAG,GAAGI,MAAM,CAACM,OAAO,CAACC,SAAS,CAAC,CAAC;IACtCC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACd,GAAG,CAAC,CAAC;IAAA,CAC9Be,IAAI,CAAC,MAAM;MACRC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCd,OAAO,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,CACDe,KAAK,CAACC,GAAG,IAAI;MACVH,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;IAC/C,CAAC,CAAC;EACV,CAAC;EAED,oBACIxB,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBACI1B,OAAA;MAAA0B,QAAA,EAAG;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACX9B,OAAA;MAAK+B,SAAS,EAAC,mBAAmB;MAACC,KAAK,EAAEtB,WAAY;MAAAgB,QAAA,gBAClD1B,OAAA;QAAK+B,SAAS,EAAC,eAAe;QAAAL,QAAA,eAC1B1B,OAAA;UAAGiC,GAAG,EAAExB,MAAO;UAAAiB,QAAA,EAAErB;QAAG;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eAEN9B,OAAA,CAACF,UAAU;QAACoC,OAAO,EAAEA,CAAA,KAAMpB,eAAe,CAAC,CAAE;QAACqB,UAAU,EAAE5B;MAAK;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC;EAAA,eAGR,CAAC;AAEX,CAAC;AAAA1B,EAAA,CArCKD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AAuCT,eAAeA,GAAG;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}