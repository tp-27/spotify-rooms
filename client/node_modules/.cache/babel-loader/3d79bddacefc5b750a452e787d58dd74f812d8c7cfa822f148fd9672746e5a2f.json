{"ast":null,"code":"var _jsxFileName = \"/Users/thomasphan/Desktop/listen-with-me-app/client/src/components/Room.js\",\n  _s = $RefreshSig$();\nimport RoomHeader from './RoomHeader';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Spotify } from 'react-spotify-embed';\nimport { useEffect, useState } from 'react';\nimport '../index.css';\nimport io from 'socket.io-client';\nimport KeyContainer from './KeyContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect('http://localhost:3001'); // url from backend server\n\nconst Room = ({\n  roomKey,\n  name\n}) => {\n  _s();\n  const tracks = [\"https://open.spotify.com/track/5ihDGnhQgMA0F0tk9fNLlA?si=4472348a63dd4f84\", \"https://open.spotify.com/track/6HfOzLLjsaXsehIFEsrxTk\", \"https://open.spotify.com/track/5ihDGnhQgMA0F0tk9fNLlA?si=4472348a63dd4f83\"];\n  const SEARCH_ENDPOINT = 'https://api.spotify.com/v1/search';\n  const [track, setTrack] = useState(tracks[0]);\n  const [users, setUsers] = useState([]);\n  const [query, setQuery] = useState('');\n  const [queryType, setType] = useState('Song');\n  let accessToken = localStorage.getItem('token');\n\n  // useEffect(() => { // get this object from API call in object\n  //     console.log(key)\n\n  //     const getFriends = async () => {\n  //         try {\n  //             const res = await fetch('http://localhost:3001/friends/' , {\n  //                 method: 'POST',\n  //                 headers: {\n  //                     'Content-Type': 'application/json'\n  //                 },\n  //                 body: JSON.stringify({\n  //                     sessionKey: key\n  //                 })\n  //             })\n\n  //             const users = await res.json()\n  //             setUsers(users)\n  //             console.log(users)\n  //         } catch (error) {\n  //             console.log(error)\n  //         }\n  //     }\n\n  //     getFriends()\n  // }, [key])\n\n  const onInput = e => {\n    setQuery(e.target.value);\n  };\n  const handleSearch = async e => {\n    e.preventDefault();\n    const input = query.split('by');\n    const track = input[0].trim();\n    const artist = input[1].trim();\n    const searchQuery = `${SEARCH_ENDPOINT}?q=track%253A${track}%2520artist%253A${artist}&type=track`;\n    try {\n      const res = await fetch(searchQuery, {\n        headers: {\n          Authorization: 'Bearer ' + accessToken\n        }\n      });\n      const data = await res.json();\n      console.log(data);\n      const items = data.tracks.items;\n      const tracks = [];\n      items.forEach(item => {\n        tracks.push({\n          url: item.external_urls.spotify,\n          name: item.name,\n          artist: item.artists\n        });\n      });\n      console.log(tracks);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const generateSong = () => {\n    let randTrack = getRandomNumberInRange();\n    console.log(randTrack);\n    setTrack(tracks[randTrack]);\n    socket.emit('change_song', {\n      song: tracks[randTrack],\n      room: roomKey\n    });\n  };\n  const getRandomNumberInRange = () => {\n    return Math.floor(Math.random() * (tracks.length - 1 - 0 + 1)) + 0;\n  };\n  const changeType = e => {\n    setType(e.target.textContent);\n  };\n  useEffect(() => {\n    // run this whenever socket changes (receives events)\n    socket.on('new_song', data => {\n      setTrack(data);\n    });\n  }, [socket]);\n  useEffect(() => {\n    // run this only on initial render\n    socket.emit('join_room', {\n      room: roomKey\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-header\",\n      children: [/*#__PURE__*/_jsxDEV(RoomHeader, {\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(KeyContainer, {\n        roomKey: roomKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Search for a song (in the format)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        className: \"search-form\",\n        onSubmit: handleSearch,\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          onInput: onInput,\n          placeholder: \"Trophies by Drake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n          id: \"dropdown-basic-button\",\n          title: queryType,\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onClick: changeType,\n            children: \"Song\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onClick: changeType,\n            children: \"Album\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onClick: changeType,\n            children: \"Artist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onClick: changeType,\n            children: \"Playlist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Spotify, {\n      link: track\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n_s(Room, \"fKabWeojULKi2g2x8UK9DHoWR6E=\");\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["RoomHeader","Dropdown","DropdownButton","Form","Button","Spotify","useEffect","useState","io","KeyContainer","jsxDEV","_jsxDEV","socket","connect","Room","roomKey","name","_s","tracks","SEARCH_ENDPOINT","track","setTrack","users","setUsers","query","setQuery","queryType","setType","accessToken","localStorage","getItem","onInput","e","target","value","handleSearch","preventDefault","input","split","trim","artist","searchQuery","res","fetch","headers","Authorization","data","json","console","log","items","forEach","item","push","url","external_urls","spotify","artists","error","generateSong","randTrack","getRandomNumberInRange","emit","song","room","Math","floor","random","length","changeType","textContent","on","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Control","type","placeholder","id","title","Item","onClick","link","_c","$RefreshReg$"],"sources":["/Users/thomasphan/Desktop/listen-with-me-app/client/src/components/Room.js"],"sourcesContent":["import RoomHeader from './RoomHeader'\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Spotify } from 'react-spotify-embed'\nimport { useEffect, useState } from 'react';\nimport '../index.css'\nimport io from 'socket.io-client'\nimport KeyContainer from './KeyContainer';\n\nconst socket = io.connect('http://localhost:3001') // url from backend server\n\nconst Room = ({ roomKey, name }) => {\n    const tracks = [\n            \"https://open.spotify.com/track/5ihDGnhQgMA0F0tk9fNLlA?si=4472348a63dd4f84\",\n            \"https://open.spotify.com/track/6HfOzLLjsaXsehIFEsrxTk\",\n            \"https://open.spotify.com/track/5ihDGnhQgMA0F0tk9fNLlA?si=4472348a63dd4f83\"\n    ]\n    const SEARCH_ENDPOINT = 'https://api.spotify.com/v1/search'\n    const [track, setTrack] = useState(tracks[0])\n    const [users, setUsers] = useState([])\n    const [query, setQuery] = useState('')\n    const [queryType, setType] = useState('Song')\n    let accessToken = localStorage.getItem('token')\n\n    \n    // useEffect(() => { // get this object from API call in object\n    //     console.log(key)\n\n    //     const getFriends = async () => {\n    //         try {\n    //             const res = await fetch('http://localhost:3001/friends/' , {\n    //                 method: 'POST',\n    //                 headers: {\n    //                     'Content-Type': 'application/json'\n    //                 },\n    //                 body: JSON.stringify({\n    //                     sessionKey: key\n    //                 })\n    //             })\n    \n    //             const users = await res.json()\n    //             setUsers(users)\n    //             console.log(users)\n    //         } catch (error) {\n    //             console.log(error)\n    //         }\n    //     }\n\n    //     getFriends()\n    // }, [key])\n\n    const onInput = (e) => {\n        setQuery(e.target.value)\n    }\n\n    const handleSearch = async (e) => {\n        e.preventDefault()\n        const input = (query).split('by')\n        const track = input[0].trim()\n        const artist = input[1].trim()    \n        const searchQuery = `${SEARCH_ENDPOINT}?q=track%253A${track}%2520artist%253A${artist}&type=track`\n        \n        try {\n            const res = await fetch(searchQuery, {\n                headers: {\n                    Authorization: 'Bearer ' + accessToken\n                }\n            })\n\n            const data = await res.json()\n            \n            console.log(data)\n            const items = data.tracks.items\n            const tracks = []\n\n            items.forEach((item) => {\n                tracks.push( {\n                    url: item.external_urls.spotify,\n                    name: item.name,\n                    artist: item.artists    \n                })\n            })\n\n            console.log(tracks)\n\n            \n\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    const generateSong = () => {\n        let randTrack = getRandomNumberInRange()\n        console.log(randTrack)\n        setTrack(tracks[randTrack])\n        socket.emit('change_song', { song: tracks[randTrack], room: roomKey })\n    }\n\n    const getRandomNumberInRange = () => {\n        return Math.floor(Math.random() * ((tracks.length - 1) - 0 + 1)) + 0;\n    }\n\n    const changeType = (e) => {\n        setType(e.target.textContent)\n    }\n\n    useEffect(() => { // run this whenever socket changes (receives events)\n        socket.on('new_song', (data) => { \n            setTrack(data)\n        })\n    }, [socket]) \n    \n    useEffect(() => { // run this only on initial render\n        socket.emit('join_room', { room: roomKey })\n    }, [])\n\n    return (\n        <div className=\"room\">\n            <div className=\"room-header\">\n                <RoomHeader name={name}/>\n                <KeyContainer roomKey={roomKey}/>\n            </div>\n\n            <div className=\"room-body\">\n                <p>Search for a song (in the format)</p>\n                <Form className=\"search-form\" onSubmit={handleSearch}> \n                    <Form.Control type=\"text\" onInput={onInput} placeholder='Trophies by Drake'/>\n                    <DropdownButton id=\"dropdown-basic-button\" title={queryType}>\n                        <Dropdown.Item onClick={changeType}>Song</Dropdown.Item>\n                        <Dropdown.Item onClick={changeType}>Album</Dropdown.Item>\n                        <Dropdown.Item onClick={changeType}>Artist</Dropdown.Item>\n                        <Dropdown.Item onClick={changeType}>Playlist</Dropdown.Item>\n                    </DropdownButton>\n                </Form> \n                {/* <Button className=\"random-btn\" onClick={generateSong}>Change song</Button> */}\n            </div>\n            \n        \n            <Spotify link={track} />\n\n            {/* <Dropdown>\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                friends\n                </Dropdown.Toggle>\n        \n                <Dropdown.Menu>\n                    {users.map((user, index) => {\n                        return <Dropdown.Item key={index}>{user}</Dropdown.Item>;\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>  */}\n        </div>\n       \n    )\n}\n\nexport default Room"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}