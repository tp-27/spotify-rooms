{"ast":null,"code":"var _jsxFileName = \"/Users/thomasphan/Desktop/listen-with-me-app/client/src/components/KeyContainer.js\",\n  _s = $RefreshSig$();\nimport '../index.css';\nimport CopyButton from './CopyButton';\nimport { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst KeyContainer = ({\n  key\n}) => {\n  _s();\n  const [copy, setCopy] = useState(false);\n  const keyRef = useRef();\n  const keyDivStyle = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    width: \"100%\"\n  };\n  const copyToClipboard = () => {\n    const key = keyRef.current.innerText; // Get the text content of the paragraph\n    navigator.clipboard.writeText(key) // Use Clipboard API to copy text\n    .then(() => {\n      console.log('Text copied to clipboard');\n      console.log(key);\n    }).catch(err => {\n      console.error('Failed to copy text: ', err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Key:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-key-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-key-container\",\n      style: keyDivStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"key-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: keyRef,\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CopyButton, {\n        onClick: () => copyToClipboard(),\n        showCopied: copy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(KeyContainer, \"BIwFhNq9dOieOQNn+sh2BlcssP0=\");\n_c = KeyContainer;\nexport default KeyContainer;\nvar _c;\n$RefreshReg$(_c, \"KeyContainer\");","map":{"version":3,"names":["CopyButton","useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","KeyContainer","key","_s","copy","setCopy","keyRef","keyDivStyle","display","justifyContent","width","copyToClipboard","current","innerText","navigator","clipboard","writeText","then","console","log","catch","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","ref","onClick","showCopied","_c","$RefreshReg$"],"sources":["/Users/thomasphan/Desktop/listen-with-me-app/client/src/components/KeyContainer.js"],"sourcesContent":["import '../index.css'\nimport CopyButton from './CopyButton';\nimport { useState, useRef } from 'react'\n\nconst KeyContainer = ({ key }) => {\n    const [copy, setCopy] = useState(false)\n    const keyRef = useRef()\n\n\n    const keyDivStyle = {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        width: \"100%\",\n    }\n\n    const copyToClipboard = () => {\n        const key = keyRef.current.innerText // Get the text content of the paragraph\n        navigator.clipboard.writeText(key) // Use Clipboard API to copy text\n            .then(() => {\n                console.log('Text copied to clipboard')\n                console.log(key)\n            })\n            .catch(err => {\n                console.error('Failed to copy text: ', err)\n            })\n    }\n\n    return (\n        <>\n        <p>Key:</p>\n        <div className=\"new-key-container\"></div>\n            <div className=\"new-key-container\" style={keyDivStyle}>\n            <div className=\"key-container\">\n                <p ref={keyRef}>{key}</p>\n            </div>\n            <CopyButton onClick={() => copyToClipboard()} showCopied={copy} />\n        </div>\n        \n        </>\n    )\n}\n\nexport default KeyContainer"],"mappings":";;AAAA,OAAO,cAAc;AACrB,OAAOA,UAAU,MAAM,cAAc;AACrC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAMW,MAAM,GAAGV,MAAM,CAAC,CAAC;EAGvB,MAAMW,WAAW,GAAG;IAChBC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,eAAe;IAC/BC,KAAK,EAAE;EACX,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMT,GAAG,GAAGI,MAAM,CAACM,OAAO,CAACC,SAAS,EAAC;IACrCC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACd,GAAG,CAAC,CAAC;IAAA,CAC9Be,IAAI,CAAC,MAAM;MACRC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCD,OAAO,CAACC,GAAG,CAACjB,GAAG,CAAC;IACpB,CAAC,CAAC,CACDkB,KAAK,CAACC,GAAG,IAAI;MACVH,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;IAC/C,CAAC,CAAC;EACV,CAAC;EAED,oBACIvB,OAAA,CAAAE,SAAA;IAAAuB,QAAA,gBACAzB,OAAA;MAAAyB,QAAA,EAAG;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACX7B,OAAA;MAAK8B,SAAS,EAAC;IAAmB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrC7B,OAAA;MAAK8B,SAAS,EAAC,mBAAmB;MAACC,KAAK,EAAEtB,WAAY;MAAAgB,QAAA,gBACtDzB,OAAA;QAAK8B,SAAS,EAAC,eAAe;QAAAL,QAAA,eAC1BzB,OAAA;UAAGgC,GAAG,EAAExB,MAAO;UAAAiB,QAAA,EAAErB;QAAG;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACN7B,OAAA,CAACJ,UAAU;QAACqC,OAAO,EAAEA,CAAA,KAAMpB,eAAe,CAAC,CAAE;QAACqB,UAAU,EAAE5B;MAAK;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC;EAAA,eAEJ,CAAC;AAEX,CAAC;AAAAxB,EAAA,CApCKF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAsClB,eAAeA,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}