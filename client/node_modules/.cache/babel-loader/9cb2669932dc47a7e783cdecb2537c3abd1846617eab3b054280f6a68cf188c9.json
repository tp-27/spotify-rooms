{"ast":null,"code":"var _jsxFileName = \"/Users/thomasphan/Desktop/listen-with-me-app/client/src/components/KeyContainer.js\",\n  _s = $RefreshSig$();\nimport '../index.css';\nimport CopyButton from './CopyButton';\nimport { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst KeyContainer = ({\n  key\n}) => {\n  _s();\n  const [copy, setCopy] = useState(false);\n  const keyRef = useRef();\n  const copyToClipboard = () => {\n    const key = keyRef.current.innerText; // Get the text content of the paragraph\n    navigator.clipboard.writeText(key) // Use Clipboard API to copy text\n    .then(() => {\n      console.log('Text copied to clipboard');\n      console.log(key);\n    }).catch(err => {\n      console.error('Failed to copy text: ', err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Key:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-key-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-key-container\",\n      style: keyDivStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"key-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: keyRef,\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CopyButton, {\n        onClick: () => copyToClipboard(),\n        showCopied: copy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(KeyContainer, \"BIwFhNq9dOieOQNn+sh2BlcssP0=\");\n_c = KeyContainer;\nexport default KeyContainer;\nvar _c;\n$RefreshReg$(_c, \"KeyContainer\");","map":{"version":3,"names":["CopyButton","useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","KeyContainer","key","_s","copy","setCopy","keyRef","copyToClipboard","current","innerText","navigator","clipboard","writeText","then","console","log","catch","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","keyDivStyle","ref","onClick","showCopied","_c","$RefreshReg$"],"sources":["/Users/thomasphan/Desktop/listen-with-me-app/client/src/components/KeyContainer.js"],"sourcesContent":["import '../index.css'\nimport CopyButton from './CopyButton';\nimport { useState, useRef } from 'react'\n\nconst KeyContainer = ({ key }) => {\n    const [copy, setCopy] = useState(false)\n    const keyRef = useRef()\n\n    const copyToClipboard = () => {\n        const key = keyRef.current.innerText // Get the text content of the paragraph\n        navigator.clipboard.writeText(key) // Use Clipboard API to copy text\n            .then(() => {\n                console.log('Text copied to clipboard')\n                console.log(key)\n            })\n            .catch(err => {\n                console.error('Failed to copy text: ', err)\n            })\n    }\n\n    return (\n        <>\n        <p>Key:</p>\n        <div className=\"new-key-container\"></div>\n            <div className=\"new-key-container\" style={keyDivStyle}>\n            <div className=\"key-container\">\n                <p ref={keyRef}>{key}</p>\n            </div>\n            <CopyButton onClick={() => copyToClipboard()} showCopied={copy} />\n        </div>\n        \n        </>\n    )\n}\n\nexport default KeyContainer"],"mappings":";;AAAA,OAAO,cAAc;AACrB,OAAOA,UAAU,MAAM,cAAc;AACrC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAMW,MAAM,GAAGV,MAAM,CAAC,CAAC;EAEvB,MAAMW,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAML,GAAG,GAAGI,MAAM,CAACE,OAAO,CAACC,SAAS,EAAC;IACrCC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACV,GAAG,CAAC,CAAC;IAAA,CAC9BW,IAAI,CAAC,MAAM;MACRC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCD,OAAO,CAACC,GAAG,CAACb,GAAG,CAAC;IACpB,CAAC,CAAC,CACDc,KAAK,CAACC,GAAG,IAAI;MACVH,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;IAC/C,CAAC,CAAC;EACV,CAAC;EAED,oBACInB,OAAA,CAAAE,SAAA;IAAAmB,QAAA,gBACArB,OAAA;MAAAqB,QAAA,EAAG;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACXzB,OAAA;MAAK0B,SAAS,EAAC;IAAmB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrCzB,OAAA;MAAK0B,SAAS,EAAC,mBAAmB;MAACC,KAAK,EAAEC,WAAY;MAAAP,QAAA,gBACtDrB,OAAA;QAAK0B,SAAS,EAAC,eAAe;QAAAL,QAAA,eAC1BrB,OAAA;UAAG6B,GAAG,EAAErB,MAAO;UAAAa,QAAA,EAAEjB;QAAG;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACNzB,OAAA,CAACJ,UAAU;QAACkC,OAAO,EAAEA,CAAA,KAAMrB,eAAe,CAAC,CAAE;QAACsB,UAAU,EAAEzB;MAAK;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC;EAAA,eAEJ,CAAC;AAEX,CAAC;AAAApB,EAAA,CA7BKF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AA+BlB,eAAeA,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}